<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>入门 on Huija&#39;s Blog</title>
    <link>https://huija.github.io/tags/%E5%85%A5%E9%97%A8/</link>
    <description>Recent content in 入门 on Huija&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Thu, 29 Apr 2021 09:44:48 +0800</lastBuildDate><atom:link href="https://huija.github.io/tags/%E5%85%A5%E9%97%A8/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>MongoDB入门</title>
      <link>https://huija.github.io/mongodb-starter/</link>
      <pubDate>Thu, 29 Apr 2021 09:44:48 +0800</pubDate>
      
      <guid>https://huija.github.io/mongodb-starter/</guid>
      <description>MongoDB入门 MongoDB是面向文档的数据库, 有区别于传统的RDBMS(Oracle,MySQL,PostgreSQL&amp;hellip;), 是一个基于文档(BSON)存储的开源数据库系统.
最直观感受 表在MongoDB内叫集合, 英文名Collection, 表示一批同类文档的集合 每一行数据在MongoDB内可以叫一个文档, 英文Document, 存储格式Binary Json, 可以简单类比为Json MongoDB是NoSQL数据库, 有自己的语法规则, 也就是不使用SQL进行CRUD(但是其BI Connector支持模拟MySQL进行查询) MongoDB推崇Schema Less, 无需提前设计表的结构, 同一个集合内的文档可以有不同的字段 理解Document概念 文档是文档型数据库的数据存储格式, 从根本上影响使用人员的方方面面.
传统的RDBMS是基于Relation Model, 需要开发人员对现实业务进行抽象, 根据范式标准设计表结构, 使用联表查询来表示完整的事物结构, 关键词: 主键, 外键, 关系模型, 三范式. 文档的存储可以理解为存了一个Json, 特性是支持对象模型的灵活组合, 一般情况下, 无需进行过度的设计拆分, 此外, 可以灵活地增删列是其一大核心优势, 关键词: 组合, Schema Less 业务设计举例 商品, 出入库设计
传统RDBMS会设计为, &amp;lsquo;商品表&amp;rsquo;+&amp;lsquo;出入库表&amp;rsquo;, 以商品ID作为外键进行关联 作为文档型数据库, MongoDB只需要一个&amp;rsquo;商品表&amp;rsquo;, 而出入库记录作为商品表的一个数组类型字段直接存在一起. Binary Json MongoDB自己设计使用的Bson, 类似Json格式, 支持更多的数据类型: https://docs.mongodb.com/manual/reference/bson-types/
Bson实际就是一种buffer编码规则, 对外呈现Json格式, 客户端以Bson为参数, 对MongoDB进行RPC调用, 然后得到同样为Bson格式的返回结果.
_id字段 每一行文档都有一个自己的唯一标志: _id, 有点类似于RDBMS内的Row Num, 不推荐用户自己进行定义, 其具有自己的生成规则, 默认是ObjectId类型, 其本质是长度12的byte数组, 前4个byte是时间戳, 中间5个byte是当前进程标志, 最后3个byte是程序内的计数器.</description>
    </item>
    
  </channel>
</rss>

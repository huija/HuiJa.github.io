<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Home Page on Huija&#39;s Blog</title>
    <link>https://huija.github.io/</link>
    <description>Recent content in Home Page on Huija&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Sun, 18 Apr 2021 21:35:19 +0800</lastBuildDate><atom:link href="https://huija.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>About</title>
      <link>https://huija.github.io/about/</link>
      <pubDate>Sun, 18 Apr 2021 21:18:19 +0800</pubDate>
      
      <guid>https://huija.github.io/about/</guid>
      <description> 🔭 I’m currently working on JiangSu-WuXi 💬 Ask me: Wechat:zhj1150555483 📫 Reach me: zhj3212j@outlook.com ⚡ WeChat Public Account: 从入门到删库跑路  </description>
    </item>
    
    <item>
      <title>Upcoming Google I/O Go Events</title>
      <link>https://huija.github.io/go-io2010-preview/</link>
      <pubDate>Wed, 12 May 2010 12:00:00 +0800</pubDate>
      
      <guid>https://huija.github.io/go-io2010-preview/</guid>
      <description>即将到来的谷歌 I/O Go活动 原文信息  地址：Upcoming Google I/O Go Events 作者：Andrew Gerrand 时间：2010年5月12号  中文译文 Google I/O 2010 将于下周在旧金山的Moscone中心举行。你们如果有票的话，就可以在I/O会议和训练营看到一些Go团队的成员。按时间倒序排列（如下）:
Rob Pike和Russ Cox将在周四上午10点15分进行一个演讲，Go Programming 。这一环节将详细讨论Go在实际意义上与其他语言的区别。通过一系列的例子，他们将展示Go的各种特性以及它们影响程序设计的方式。
一些Go团队的成员将在周三下午12点到2:30的办公时间待在Go语言板块。来现场由这些专家解答你的Go语言问题。
在周二下午4点15分的训练营，Andrew Gerrand将做一个关于Go的介绍性演讲。这一环节将概述那些促使我们构建一门新语言的问题，以及Go解决这些问题的方法。
如果你要来参加I/O，我们期待在那里见到你!
Next article:New Talk and Tutorials
Previous article:Third-party libraries: goprotobuf and beyond
Blog Index</description>
    </item>
    
    <item>
      <title>Go New Talk and Tutorials</title>
      <link>https://huija.github.io/go-new-talk-and-tutorials/</link>
      <pubDate>Wed, 05 May 2010 12:00:00 +0800</pubDate>
      
      <guid>https://huija.github.io/go-new-talk-and-tutorials/</guid>
      <description>Go New Talk and Tutorials 原文信息  地址：Go New Talk and Tutorials 作者：Andrew Gerrand 时间：2010年5月5号  中文译文 Rob Pike最近在斯坦福大学的计算机系统研讨会(EE380) 做了一个演讲，演讲的名字叫 Another Go at Language Design ，这个演讲概述了Go语言的设计之痒以及Go是如何解决这些问题的。你可以在youtube 看到演讲视频，以及从斯坦福大学网下载（资料）。
上周的发布，包括一个代码实验“编写网页应用” ，其中详细说明了一个简单wiki程序的架构。对于一些Go语言的概念而言，这是一个实用性的介绍，也是一系列Go代码实验的第一趴。
最后，我们经常被问到“Go的packages是如何工作的？”，相较于解释说明，展示是更加容易的，所以我在Go Packages录屏 统一演示了编写、构建、安装和重新分发Go包的过程。我很乐意近期在gocoding YouTube channel 发布更多关于Go编程主题的文章。
Next article:Upcoming Google I/O Go Events
Previous article:JSON-RPC: a tale of interfaces
Blog Index</description>
    </item>
    
    <item>
      <title>JSON-RPC: a tale of interfaces</title>
      <link>https://huija.github.io/go-json-rpc/</link>
      <pubDate>Tue, 27 Apr 2010 12:00:00 +0800</pubDate>
      
      <guid>https://huija.github.io/go-json-rpc/</guid>
      <description>JSON-RPC: 接口的故事 原文信息  地址：JSON-RPC: a tale of interfaces 作者：Andrew Gerrand 时间：2010年4月27号  中文译文 这里（这篇文章）我们提供一个例子，Go的interfaces 重构代码后会让代码更加灵活并具有更好的拓展性。
最初，标准库里面的RPC package使用了一个叫gob 的自定义连接（传输）格式。对于一个特定的应用，我们希望能使用JSON作为一个可选连接（传输）格式。
我们先定义了一对interface去描述存在的连接（传输）格式，一个给到客户端，一个给到服务端(如下所示)。
type ServerCodec interface {ReadRequestHeader(*Request) errorReadRequestBody(interface{}) errorWriteResponse(*Response, interface{}) errorClose() error} 在服务端代码，我们将两个内部方法的声明进行改变，输入参数从之前的gob.Encoder变为ServerCodec。下面就是其中一个内部方法。
func sendResponse(sending *sync.Mutex, req *Request, reply interface{}, enc *gob.Encoder, errmsg string) 修改后
func sendResponse(sending *sync.Mutex, req *Request, reply interface{}, enc ServerCodec, errmsg string) 然后我们编写了一个简单的gobServerCodec代码块来再现原来的功能。并基于此很容易构建了 jsonServerCodec。
在对客户端代码进行了类似的改造后，我们完成了需要在RPC包上做的全面工作。
整个练习耗费大概20分钟！在整理测试新代码后，最终的代码修改 被提交
在Java或c++等面向继承的语言中，比较容易想到的方法是，泛化RPC类，并创建JsonRPC和GobRPC子类。但是，如果您想进一步泛化该层次结构，则此方法将变得棘手。（例如，你需要实现一个替代的RPC标准）。在Go包中，我们采用了一种概念上更简单、需要编写或更改的代码更少的方法。
 其实就是组合相比继承的优点，但是翻译过来感觉有点说的简单了。
 任何代码库的一个重要品质都是可维护性。随着需求的变化，很有必要把代码适配得轻松、干净，以免它变得难以阅读和工作。我们相信Go的轻量级、面向组合的类型系统提供了一种构建可伸缩代码的方法。</description>
    </item>
    
    <item>
      <title>Third-party libraries: goprotobuf and beyond</title>
      <link>https://huija.github.io/go-protobuf/</link>
      <pubDate>Tue, 20 Apr 2010 12:00:00 +0800</pubDate>
      
      <guid>https://huija.github.io/go-protobuf/</guid>
      <description>第三方库: goprotobuf及以后 原文信息  地址：Third-party libraries: goprotobuf and beyond 作者：Andrew Gerrand 时间：2010年4月20号  中文译文 （2010年）3月24号，Rob Pike发布了goprotobuf ，是谷歌数据交换格式Protocol Buffers的Go语言实现，Protocol Buffers简称protobufs。随着goprotobuf的发布，Go加入了c++、Java和Python的行列，成为官方提供protobuf实现的语言之一。这是一个重要里程碑，标志着能够实现现有系统和Go构建的系统之间的互操作性。
goprotobuf项目包含两个部分：一个是“协议编译器插件（protocol compiler plugin）”，用于生成Go的源码文件，编译后（的代码）可以访问和管理协议缓存区；另一个是Go package, 对编解码以及访问协议缓存区提供了运行时的支持。
想要使用goprotobuf的话，你首先需要同时安装Go和protobuf 。然后你可以通过goinstall来安装“proto”这个packge：
goinstall goprotobuf.googlecode.com/hg/proto  接着安装&amp;quot;protocol compiler plugin&amp;quot;：
cd $GOROOT/src/pkg/goprotobuf.googlecode.com/hg/compiler make install  更多细节参考项目的README文件。
goprotobuf是不断增长的第三方Go项目列表中的一个。在goprotobuf发布之后，X Go绑定已经从标准库分离到x-go-binding 项目，并且已经开始了一个Freetype的项目freetype-go 。还有（很多）其他流行的第三方项目，包含轻量化的web框架web.go ，Go语言的GTK（接口）绑定库gtk-go。
我们希望鼓励开源社区开发其他有用的软件包。如果你有正在做的工作，请不要藏在自己的心里 - 联系我们的邮件列表golang-nuts让我们知道吧。
Next article:JSON-RPC: a tale of interfaces
Previous article:Go: What&amp;rsquo;s New in March 2010
Blog Index</description>
    </item>
    
    <item>
      <title>Go: What&#39;s New in March 2010</title>
      <link>https://huija.github.io/go-hello-world/</link>
      <pubDate>Thu, 18 Mar 2010 12:00:00 +0800</pubDate>
      
      <guid>https://huija.github.io/go-hello-world/</guid>
      <description>Go: 2010年3月有什么新消息 原文信息  地址：Go: What&amp;rsquo;s New in March 2010 作者：Andrew Gerrand 时间：2010年3月18号  中文译文 欢迎来到Go的官方博客。我们（Go团队）希望通过发布这些博客，让全世界了解到关于Go编程语言的最新开发状况以及围绕Go语言不断成长的最新生态和应用。
Go发行（2009年11月）已经过去几个月了，所以让我们谈谈自那以后，Go的世界发生了什么。
谷歌的核心团队继续开发语言、编译器、包、工具和文档。编译器现在生成的代码在某些情况下比首次release时快1到2倍。我们已经将一些Benchmark的性能测试图表和编译状态放在一起，来追踪每一个对于Go语言的更改的可靠性。
我们对语法进行了修改，使语言更加简洁、规范和灵活。分号在Go语言内基本被全部删除 。…T语法能够更容易地处理任意数量的方法参数。x[lo:] 切片语法，现在是x[lo:len(x)]的缩写。Go现在也原生支持复数。查看release notes 获取更多信息。
Godoc现在能更好地支持第三方库，并且有一个新的工具 -goinstall- 已经被发布，它能够让使用者更简单地安装这些第三方库。此外，我们也开始开发一个package的跟踪系统，来更轻松地找到你需要的库。你可以在Packages page 看到这些包的开始部分。
超过4w行的代码已经被加入到了标准库内， 包括许多全新的packages，其中相当一部分的代码是由外部贡献者编写。
说到第三方，自从我们的邮件列表和irc频道（#go-nuts on freenode）启动以来，一个充满活力的社区已经蓬勃发展了起来。我们正式为这个项目增加了50多人。他们的贡献包括从bug修复和文档更正到核心包的编写和对其他操作系统的支持（Go目前支持FreeBSD, 并且Windows的适配也正在处理）。我们认为这些社区贡献是迄今为止最成功的（一趴）。
我们也收到了一些好评。这篇recent article in PC World 总结了围绕该项目的热情。一些博客朋友已经开始记录他们之于这门语言的体验(比如 这里 , 这里 ,还有 这里) 。总体上我们的用户的反映非常积极，一个初学者评论道“I came away extremely impressed. Go walks an elegant line between simplicity and power.&amp;quot; 。
至于未来：我们已经听取了无数的声音告诉我们他们需要什么，现在正专注于让Go准备好迎接高光时刻。我们正在改进垃圾收集器、运行时调度程序、工具链和标准库，并探索新的语言特性。2010年对Go来说将是激动人心的一年，我们期待着与社区合作，使它成为一个成功的一年。
下一篇文章：Third-party libraries: goprotobuf and beyond
博客地址</description>
    </item>
    
  </channel>
</rss>
